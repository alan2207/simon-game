// initial variables
var buttons = [...document.querySelectorAll('.button')];
var strictButton = document.getElementById('strict');
var startButton = document.getElementById('start');
var roundsCountTxt = document.getElementById('roundsCount');
var board = document.getElementById('board');
var repeat = document.getElementById('repeat');

// tracks number of rounds
var roundsCount = 1;

// combinations that player entered
var playersCombination = [];

// combinations generated by computer
var simonsCombination = [];

// checking if game is active
var game = false;

// allowing strict mode
var strict = false;

// source for buttons sounds
var sounds = [
    'assets/audio/simonSound1.mp3',
    'assets/audio/simonSound2.mp3',
    'assets/audio/simonSound3.mp3',
    'assets/audio/simonSound4.mp3'
];

// event listener for strict mode switcher
strictButton.addEventListener('click', function() {
    if(!game) {
        strict = !strict;
        var self = this;
        lightButton(this);
    }
});


// starting switch event listener
startButton.addEventListener('click', function() {
    var self = this;
    lightButton(this);
    restart();
});

// lighting button when clicked
function lightButton(self) {
    self.classList.add('light');
    window.setTimeout(function() {
         self.classList.remove('light');
     }, 500);
}


// uppdating rounds count
function updateRoundsCount(round) {
    roundsCountTxt.textContent = round;
}

// starting the game
function play() {
    if(!game) {
        game = true;
        simonsTurn();
    }
}

// restarting from beginning
function restart() {
    game = false;
    roundsCount = 1;
    updateRoundsCount(roundsCount);
    simonsCombination = [];
    play();
}

// add light and sound to the clicked button
function buttonsBehaviour(button) {
    var audio = new Audio(sounds[buttons.indexOf(button)]);
    audio.play();
    lightButton(button);
}

// computer generating its moves randomly
function simonsTurn() {
    playersCombination = [];
    simonsCombination.push(Math.floor(Math.random() * 4));
    simonSays(simonsCombination);
}

// computer triggering the buttons behaviour
function simonSays(arr) {
    var i = 0;
    var interval = setInterval(function() {
        buttonsBehaviour(buttons[arr[i]]);
        i++;
        if(i >= arr.length) {
            clearInterval(interval);
        }
    }, 700)
}

// comparing if arrays are equal by item values
function compareCombinations(arr1, arr2) {
    return arr1.join('') === arr2.join('');
}

// checking for victory after 20 rounds
function checkWin() {
    if(roundsCount > 20) {
        return true;
    }
    return false;
}

// playing sound when player makes mistake
function failBuzz() {
    var audio = new Audio('assets/audio/failsimon.mp3');
    audio.play();
}


// repeating last pattern
function repeatingFunc() {
    var self = this;
    lightButton(this);
    simonSays(simonsCombination);
}



// triggered when player clicked a button
function playersTurn() {
    // clickable only when game is running
    if(game) {
        playersCombination.push(buttons.indexOf(this));
        buttonsBehaviour(this);
        // if combinations not mathcing, proceed as following:
        if(playersCombination[playersCombination.length - 1] !== simonsCombination[playersCombination.length - 1]){
            // if strict enabled, end the game
            failBuzz();
            if(strict) {
                game = false;
                setTimeout(function() {
                    alert('game over')
                }, 500)
                setTimeout(function() {
                    restart();
                }, 1000)
                // otherwise alow player to repeat simons moves again, and continue the game
            } else {
                playersCombination = [];
                setTimeout(function() {
                    alert('wrong combination, repeat and try again!')
                }, 500)
                repeat.addEventListener('click', repeatingFunc);
            }
        // if combinations are mathcing:
        } else if(compareCombinations(playersCombination, simonsCombination)) {
            roundsCount++;
            // if win is true, end the game, and notify the user that he has won the game
            if(checkWin()) {
                game = false;
                setTimeout(function() {
                    alert('congratulations');
                }, 500)
            // otherwise continue to the next round
            } else {
                updateRoundsCount(roundsCount);
                simonsTurn();
            }

        }
    }
}

// event listeners for playing buttons
buttons.forEach(button => {
    button.addEventListener('click', playersTurn);
})
